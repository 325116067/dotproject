<?php
/**
 * Dynamic list generates its data on demand using a
 * Query and a set of filter objects.
 * 
 * @package dotproject
 * @subpackage system
 * @version 3.0 alpha
 */
class DP_List_Dynamic implements Countable, Iterator, SplObserver, DP_View_List_DataSource {
	/**
	 * @var DP_Query $query Holds the query to execute
	 * 
	 * May be replaced in future with table gateway object (Zend_Db_Table)
	 */
	protected $query;
	/**
	 * @var DP_Query $cq Query to find the full non limited count of rows.
	 */
	protected $cq;
	
	/**
	 * @var Array $filters Array of DP_Filter objects.
	 */
	protected $filters;
	/**
	 * @var DP_Query_Sort $sorter The sort object holding the sort rules.
	 */
	protected $sorter;
	/**
	 * @var DP_View_Pager $pager The pager control indicating the current page.
	 */
	protected $pager;
	
	/**
	 * @var Array $object_list Array of rows generated by the query.
	 */
	protected $object_list;	
	/**
	 * @var Bool $object_list_iscurrent The list is current if none of the filters have been changed since last query.
	 */
	protected $object_list_iscurrent;
	/**
	 * @var Integer $object_iter_idx The index of the object iterator
	 */
	protected $object_iter_idx;
	
	public function __construct() {
		$this->object_list = Array();
		$this->object_list_iscurrent = false;
		
		$this->object_iter_idx = 0;
		
		$this->filters = Array();
		$this->sorter = Array();
	}

	public function refresh() {
		$this->object_list = $this->query->loadList();
		$this->object_list_iscurrent = true;
		
		if ($this->pager instanceof DP_View_Pager) {
			$this->pager->setTotalItems($this->count());
		}
	}
	
	// From Countable
	
	/**
	 * Get the number of records (if any)
	 * 
	 * @return Integer number of records
	 */
	public function count() {
		if ($this->object_list_iscurrent) {
			return count($this->object_list);
		} else {
			$this->refresh();
		}
	}

	// From Iterator
	
	/**
	 * Return the current element.
	 */
	public function current() {
		if ($this->object_list_iscurrent) {
			return $this->object_list[$this->object_iter_idx];
		}
	}
	
	/**
	 * Return the key of the current element.
	 */
	public function key() {
		if ($this->object_list_iscurrent) {
			return $this->object_iter_idx;
		}
	}
	
	/**
	 * Move forward to next element.
	 */
	public function next() {
		$this->object_iter_idx++;
	}
	
	/**
	 * Rewind the Iterator to the first element.
	 */
	public function rewind() {
		$this->object_iter_idx = 0;
	}
	
	/**
	 * Check if there is a current element after calls to rewind() or next().
	 */
	public function valid() {
		if ($this->object_list_iscurrent) {
			if ($this->object_iter_idx < count($this->object_list)) {
				return true;
			} else {
				return false;
			}
		}
	}	
	
	// From DP_View_DataSource Interface
	
	public function clientWillRender() {
		
		foreach($this->filters as $filter) {
			if ($filter instanceof DP_Filter) {
				foreach($filter->filters as $rule) {
					switch($rule['filter_type']) {
						case DP_Filter::VALUE_EQUAL:
							$this->query->addWhere($rule['filter_field']." = ".$rule['field_value']);
							$this->cq->addWhere($rule['filter_field']." = ".$rule['field_value']);
							break;
						case DP_Filter::VALUE_SUBSTR:
							$this->query->addWhere($rule['filter_field']." LIKE '%".$rule['field_value']."%'");
							$this->cq->addWhere($rule['filter_field']." LIKE '%".$rule['field_value']."%'");
							break;
					}
				}
			}
		}
		
		if ($this->sorter instanceof DP_Query_Sort) {
			foreach ($this->sorter as $field => $sort_rule) {
				switch($sort_rule) {
					case DP_Query_Sort::SORT_DESCENDING:
						$this->query->addOrder($field.' DESC');
						break;
					case DP_Query_Sort::SORT_ASCENDING:
						$this->query->addOrder($field.' ASC');
						break;
				}
			}
		}
		
		if ($this->pager instanceof DP_View_Pager) {
			$this->query->setPageLimit($this->pager->page(), $this->pager->itemsPerPage());
		}

		$this->refresh();
	}
	
	// From SplObserver
	
	/**
	 * Called when a SplSubjects state has changed.
	 * 
	 * @param Object $subject The object that has changed.
	 */
	public function update(SplSubject $subject) {
		if ($subject instanceof DP_Filter) {
			//Zend_Debug::dump('Filter attached');
			
			$filter_exists = false;
			foreach ($this->filters as $filter) {
				if ($filter->id() == $subject->id()) {
					$filter_exists = true;
				}
			}
			
			if ($filter_exists == false) {
				$this->filters[] = $subject;
				$this->object_list_iscurrent = false;
			}
			
			// Check ID to see if it is a new instance of DP_Filter.
			// If the instance is new, add to local collection.
			// If the instance is old, compare DP_Filter objects
			// If they are different, accept the new object (possibly flag for changed state)
		}
		
		if ($subject instanceof DP_View_Pager) {
			//Zend_Debug::dump('Pager attached');
			$this->pager = $subject;
			$this->object_list_iscurrent = false;
			// Same story different type
		}
		
		if ($subject instanceof DP_Query_Sort) {
			//Zend_Debug::dump('Sorter attached');
			$this->sorter = $subject;
			$this->object_list_iscurrent = false;
			// Same story different type
		}
	}
}
?>